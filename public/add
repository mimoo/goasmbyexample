<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Go Assembly by Example: Add</title>
    <link rel=stylesheet href="site.css">
  </head>
  <body>
    <div class="example" id="add">
      <h2><a href="./">Go Assembly by Example</a>: Add</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        <a href="http://play.golang.org/p/StCVL6YzXA"><img title="Run code" src="play.png" class="run" /></a>
            <div class="highlight"><pre><span class="kn">package</span> <span class="nx">main</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>the function&rsquo;s body is empty</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="kd">func</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span> <span class="kt">int64</span><span class="p">)</span> <span class="kt">int64</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code">
	        
            <div class="highlight"><pre><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
<span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>We declare the <code>add</code> function via the <code>TEXT package_name·function_name(SB),$frame_size-arguments_size</code> pattern. Notice that the package name is empty here, corresponding to the current package, and a middle point <code>·</code> is used (U+00B7) not a period. The frame size of <code>$0</code> at the end indicates the stack space needed (none, we&rsquo;ll just use registers), while the arguments to the function and the return value take 3*8 bytes in total (they live on the caller&rsquo;s stack).</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="go">TEXT ·add(SB),$0-24</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>The <code>MOVQ</code> instruction is used to move a 64-bit value (Q stands for QUADWORD) around. Here from an offset of the frame pointer <code>FP</code> (used to refer to function arguments) to a register (<code>BX</code> and <code>BP</code>). The syntax <code>symbol+offset(register)</code> is used, where <code>(register)</code> is the address pointed by the <code>register</code>. For example, on the second line the content at <code>*(FP + 8)</code> is moved into <code>BP</code>. Note that <code>x</code> and <code>y</code> are the arguments&rsquo; names in the function&rsquo;s prototype.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="go">	MOVQ x+0(FP), BX</span>
<span class="go">	MOVQ y+8(FP), BP</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>The <code>ADDQ</code> instruction is used to add the two 64-bit registers together, it then stores the result in <code>BX</code>.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="go">	ADDQ BP, BX</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>The result is moved at address <code>*(FP + 16)</code> which is the address of the return value (positioned after all the arguments). Note that we named the symbol <code>ret</code> as a symbol is always required by the compiler.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="go">	MOVQ BX, ret+16(FP)</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>The last instruction simply returns to the caller.</p>

          </td>
          <td class="code">
	        
            <div class="highlight"><pre><span class="go">	RET</span>
<span class="go">	</span>
</pre></div>

          </td>
        </tr>
        
      </table>
      
      
      <p class="footer">
        by <a href="https://twitter.com/lyon01_david">@lyon01_david</a> | based on <a href="https://gobyexample.com/">Go by Example</a> by <a href="https://twitter.com/mmcgrana">@mmcgrana</a>
      </p>
    </div>
  </body>
</html>
